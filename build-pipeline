pipeline {

    agent {
        label "master"
    }

    tools {
        // Note: this should match with the tool name configured in your jenkins instance (JENKINS_URL/configureTools/)
        maven "Maven 3.6.0"
    }

    environment {

        // This can be nexus3 or nexus2
        NEXUS_VERSION = "nexus3"

        // This can be http or https
        NEXUS_PROTOCOL = "http"

        // Where your Nexus is running
        NEXUS_URL = "nexus:8081"

        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = "ibm-releases"

        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexusAdmin"
    }

    stages {
        stage("Clone code from GIT") {
            steps {
                script {
                    // Let's clone the source
                    git 'https://github.com/jlising/dev-ops-case-study.git';
                }
            }
        }
		stage("Test with SonarQube") {

            steps {
                script {
                    // If you are using Windows then you should use "bat" step
                    // Since unit testing is out of the scope we skip them
                   sh "mvn clean -DskipTests=true";
                }
            }
        }
		
        stage("Build with Maven") {

            steps {
                script {
                    // If you are using Windows then you should use "bat" step
                    // Since unit testing is out of the scope we skip them
                    sh "mvn package -DskipTests=true";
                }
            }
        }
	
		stage("Publish to Nexus") {
            steps {
                script {      
					// Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
					pom = readMavenPom file: "frontend/pom.xml";	
					
					// Find built artifact under target folder
                    filesByGlob = findFiles(glob: "**/target/*.${pom.packaging}");
					
					// Extract the path from the File found
                    artifactPath = filesByGlob[0].path;

                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;

                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: "com.ibm.ph",
                            version: "1.2.0",
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [

                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
								
                                // Lets upload the pom.xml file for additional information for Transitive dependencies
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                   
                }
            }
        }
    }
}